// Sch√©ma Prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url = env("DATABASE_URL")
}

model Role {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  users     User[]
}

model User {
  id        Int       @id @default(autoincrement())
  postalCode String
  nick     String
  civility  String
  firstName String
  lastName  String
  birthDate DateTime
  address   String
  city      String
  country   String
  phone     String    @unique
  email     String    @unique
  password  String
  roleId    Int
  avatar    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  panier    Panier?   @relation("user_panier")
  role      Role      @relation(fields: [roleId], references: [id])
  auth      Auth?
  commandes Commande[]
  blackList BlackList []
}

model Categorie {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  produits  Produit[]
}

model Panier {
  id        Int          @id @default(autoincrement())
  userId    Int          @unique
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  user      User         @relation("user_panier", fields: [userId], references: [id])
  produits  PanierProduit[]
}

model PanierProduit {
  id        Int      @id @default(autoincrement())
  panierId  Int
  produitId Int
  quantity  Int
  panier    Panier   @relation(fields: [panierId], references: [id])
  produit   Produit  @relation(fields: [produitId], references: [id])
}

model Image {
  id       Int       @id @default(autoincrement())
  url     String
  produitId Int
  produit Produit @relation(fields: [produitId], references: [id])
}

model Produit {
  id          Int          @id @default(autoincrement())
  naturaBuyId Int          @unique
  name        String
  price       Float
  barrePrice  Float
  description String
  categorieId Int
  quantity    Int
  duree       Int
  new         Boolean
  stock       Boolean
  ean         String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  categorie   Categorie    @relation(fields: [categorieId], references: [id])
  paniers     PanierProduit[]
  commandes   CommandeProduit[]
  images      Image[]
}

model Auth {
  id        Int     @id @default(autoincrement())
  token String
  userId Int   @unique
  ExpirationToken BigInt
  user  User @relation(fields: [userId], references: [id])
}


model Commande {
  id        Int          @id @default(autoincrement())
  userId    Int
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  IsValidate Boolean @default(false)
  user      User         @relation(fields: [userId], references: [id])
  produits  CommandeProduit[]
}

model CommandeProduit {
  id        Int      @id @default(autoincrement())
  commandeId  Int
  produitId Int
  quantity  Int
  commande    Commande   @relation(fields: [commandeId], references: [id])
  produit   Produit  @relation(fields: [produitId], references: [id])
}

model BlackList {
  id        Int     @id @default(autoincrement())
  token String
  userId Int
  ExpirationToken BigInt
  user  User @relation(fields: [userId], references: [id])
}
